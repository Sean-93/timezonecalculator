---
import Layout from "../layouts/Layout.astro";
---

<Layout
  title=""
  description=""
  keywords=""
  canonicalURL=""
  robots="index, follow"
>
  <main class="p-4">
    <div class="max-w-xl mx-auto">
      <section>
        <h1>Time Zone Calculator</h1>
        <br />
        <label for="fromZone">From Time Zone:</label>
        <select id="fromZone" name="fromZone"></select>
          <label for="fromTime" class="mt-6 block">Time:</label>
          <input type="time" id="fromTime" name="fromTime" />
      </section>
      <br />
      <section>
        <label>To Time Zones:</label>
        <div id="toZones"></div>
      </section>
      <br />
      <div>
        <button
          id="addZoneBtn"
          class="p-4 text-blue-600 hover:bg-blue-600 hover:text-white"
          >+ Add a Time Zone</button
        >
        <button
          id="convertBtn"
          class="p-4 text-green-600 hover:bg-green-600 hover:text-white"
          >Convert Time Zones</button
        >
      </div>
      <br />
      <div id="results"></div>
    </div>
  </main>
</Layout>

<style></style>

<script>
  "use strict";

  // Import Luxon types (assuming you installed it via npm in a TS project)
  import { DateTime } from "luxon";

  // Grabbing all DOM elements used
  const fromZoneEl = document.getElementById("fromZone") as HTMLSelectElement;
  const fromTimeEl = document.getElementById("fromTime") as HTMLInputElement;
  const toZonesContainer = document.getElementById("toZones") as HTMLElement;
  const resultsEl = document.getElementById("results") as HTMLElement;
  const addZoneBtn = document.getElementById("addZoneBtn") as HTMLButtonElement;
  const convertBtn = document.getElementById("convertBtn") as HTMLButtonElement;

  let allZones: string[] = [];

  // GET ALL SUPPORTED TIME ZONES, WITH A FALLBACK MESSAGE IF NOT SUPPORTED
  const getAllTimeZones = (): string[] => {
    try {
      return Intl.supportedValuesOf("timeZone");
    } catch {
      return ["Sorry!  Cannot connect to time zones."];
    }
  };

  // FILTER TIME ZONES BY PREFIX
  const filterZonesByPrefix = (prefix: string): string[] => {
    if (prefix === "All") return allZones;
    return allZones.filter((zone) => zone.startsWith(prefix));
  };

  // POPULATE TIME ZONE SELECT DROPDOWN
  const populateTimeZoneSelect = (
    selectEl: HTMLSelectElement,
    defaultZone = "UTC",
    prefix = "All"
  ): void => {
    const currentValue = selectEl.value;
    const filteredZones = filterZonesByPrefix(prefix).sort();

    selectEl.innerHTML = "";
    const fragment = document.createDocumentFragment();

    filteredZones.forEach((zone) => {
      const opt = document.createElement("option");
      opt.value = zone;
      opt.textContent = zone;
      fragment.appendChild(opt);
    });

    selectEl.appendChild(fragment);
    selectEl.value = filteredZones.includes(currentValue)
      ? currentValue
      : defaultZone;
  };

  // CREATE A ROW FOR ADDING TIME ZONE SELECTORS
  const createToZoneRow = (defaultZone = "UTC"): void => {
    const container = document.createElement("div");
    const select = document.createElement("select");
    const prefixLinks = document.createElement("div");

    // Create prefix links for "To Time Zones"
    const prefixes = [
      "All",
      "America",
      "Europe",
      "Asia",
      "Africa",
      "Pacific",
      "Australia",
      "Antarctica",
    ];
    prefixes.forEach((prefix) => {
      const link = document.createElement("a");
      link.href = "#";
      link.textContent = prefix;
      link.style.marginRight = "8px";
      link.addEventListener("click", (event: MouseEvent) => {
        event.preventDefault();
        populateTimeZoneSelect(select, select.value, prefix);
      });
      prefixLinks.appendChild(link);
    });

    container.appendChild(prefixLinks);
    populateTimeZoneSelect(select, defaultZone);

    const removeBtn = document.createElement("button");
    removeBtn.type = "button";
    removeBtn.textContent = "- Remove Time Zone";

    // Add Tailwind styling
    removeBtn.classList.add(
      "py-2",
      "px-4",
      "my-6",
      "bg-white",
      "text-red-600",
      "hover:bg-red-600",
      "hover:text-white"
    );

    removeBtn.addEventListener("click", () => {
      if (toZonesContainer.childElementCount > 1) {
        container.remove();
      } else {
        alert("At least one time zone must remain.");
      }
    });

    container.appendChild(select);
    container.appendChild(removeBtn);
    toZonesContainer.appendChild(container);
  };

  // CREATE PREFIX LINKS FOR "FROM" ZONE
  const createFromZonePrefixLinks = (): void => {
    const prefixLinks = document.createElement("div");
    const prefixes = [
      "All",
      "America",
      "Europe",
      "Asia",
      "Africa",
      "Pacific",
      "Australia",
      "Antarctica",
    ];

    prefixes.forEach((prefix) => {
      const link = document.createElement("a");
      link.href = "#";
      link.textContent = prefix;
      link.style.marginRight = "8px";
      link.addEventListener("click", (event: MouseEvent) => {
        event.preventDefault();
        populateFromZoneSelect(prefix);
      });
      prefixLinks.appendChild(link);
    });

    fromZoneEl.parentNode?.insertBefore(prefixLinks, fromZoneEl);
  };

  // POPULATE THE "FROM" ZONE SELECT
  const populateFromZoneSelect = (prefix = "All"): void => {
    populateTimeZoneSelect(fromZoneEl, fromZoneEl.value, prefix);
  };

  // ADD A NEW TIME ZONE SELECTOR ROW
  const addTimeZone = (): void => {
    createToZoneRow();
  };

  // CONVERT THE TIME FROM THE 'FROM' ZONE TO ALL 'TO' ZONES
  const convertTime = (): void => {
    const inputTime = fromTimeEl.value;
    const fromTz = fromZoneEl.value;
    resultsEl.innerHTML = "";

    // VALIDATE THE INPUT TIME FORMAT
    if (!inputTime || !/^\d{2}:\d{2}$/.test(inputTime)) {
      resultsEl.textContent = "Please enter a valid time.";
      return;
    }

    const [hour, minute] = inputTime.split(":").map(Number);
    if (hour > 23 || minute > 59) {
      resultsEl.textContent = "Invalid time input.";
      return;
    }

    // CREATE A 'FROM' TIME ZONE DATE OBJECT
    const now = DateTime.now().setZone(fromTz);
    const fromTime = DateTime.fromObject(
      {
        year: now.year,
        month: now.month,
        day: now.day,
        hour,
        minute,
      },
      { zone: fromTz }
    );

    // LOOP THROUGH 'TO' ZONE SELECTORS AND CONVERT TIME
    const toSelectors = toZonesContainer.querySelectorAll("select");
    const fragment = document.createDocumentFragment();

    toSelectors.forEach((select) => {
      const toTz = (select as HTMLSelectElement).value;
      const converted = fromTime.setZone(toTz);

      // Format the time in AM/PM format (12-hour clock)
      const resultLine = document.createElement("div");
      resultLine.textContent = `${fromTime.toFormat(
        "hh:mm a"
      )} in ${fromTz} = ${converted.toFormat("hh:mm a")} in ${toTz}`;
      fragment.appendChild(resultLine);
    });

    resultsEl.appendChild(fragment);
  };

  // INITIALIZE THE APP: LOAD TIME ZONES, SET DEFAULT ZONE, AND SET UP EVENTS
  const init = (): void => {
    allZones = getAllTimeZones().sort();
    populateFromZoneSelect("All");
    createFromZonePrefixLinks(); // Add prefix links to the "From" zone
    createToZoneRow("UTC");

    addZoneBtn.addEventListener("click", addTimeZone);
    convertBtn.addEventListener("click", convertTime);
  };

  document.addEventListener("DOMContentLoaded", init);
</script>
